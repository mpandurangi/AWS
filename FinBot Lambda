'use strict';
exports.handler = (event, context, callback) => {
    const sessionAttributes = event.sessionAttributes;
    const slots = event.currentIntent.slots;
    const finName = slots.finName;
    const finType = slots.Fintype;
    const finBuy  = slots.FinBuy;
  
    // predefined list of available books
    const validPolicy = ['1', '2', '3'];
    const validTypes = ['1','2','3'];
    const validCost = ['500','1000','1500','2000','2500','3000','3500','4000','4500','5000','5500','6000','6500','7000','7500'
    ,'8000','8500','9000','9500','10000'];
    // negative check: if valid slot value is not obtained, inform lex that user is expected 
    // respond with a slot value 
    if(finType && !(finType === "") && validTypes.indexOf(finType.toLowerCase()) === -1)
    {
        let response = { sessionAttributes: event.sessionAttributes,
          dialogAction: {
            type: "ElicitSlot",
             message: {
               contentType: "PlainText",
               content: `please enter valid type e.g. 1 or 2 `
            },
             intentName: event.currentIntent.name,
             slots: slots,
             slotToElicit : "Fintype",
            
          }
        }
        callback(null, response);
    
    }
    
    if (finName && !(finName === "") && validPolicy.indexOf(finName.toLowerCase()) === -1) {
        let response = { sessionAttributes: event.sessionAttributes,
          dialogAction: {
            type: "ElicitSlot",
             message: {
               contentType: "PlainText",
               content: `We do not have policy: ${finName}, please enter valid type e.g. 1 or 2 .`
            },
             intentName: event.currentIntent.name,
             slots: slots,
             slotToElicit : "finName"
          }
        }
        callback(null, response);
    
    }
    
     if(finBuy && !(finBuy === "") && validCost.indexOf(finBuy.toLowerCase()) === -1)
    {
        let response = { sessionAttributes: event.sessionAttributes,
          dialogAction: {
            type: "ElicitSlot",
             message: {
               contentType: "PlainText",
               content: `Please enter valid amount is multiple of 500. (Min 500 & Max 10000)`
            },
             intentName: event.currentIntent.name,
             slots: slots,
             slotToElicit : "FinBuy",
            
          }
        }
        callback(null, response);
    
    }
  
    // if valid book name is obtained, send command to choose next course of action
     let response = {sessionAttributes: sessionAttributes,
      dialogAction: {
        type: "Delegate",
        slots: event.currentIntent.slots,
 
        
        
      }
    }
    
    callback(null, response);
};
